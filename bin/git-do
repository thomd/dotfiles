#!/usr/bin/env bash
set -e
[ -n "$DEBUG" ] && set -x

#
# Create dummy commits
# --------------------
#
# This is helpful for testing git commands which requires some test commits.
#
# If the last commit message starts with an uppercase letter, then the subsequent
# commit messaged will use an uppercase letter sequence (only from A-Z).
#
# Init a git repository with 'git setup -m A' to have letter sequenced commit messages.
#
# USAGE
#
#    git do [options] [filename]
#
# OPTIONS
#
#    -n N     number of do's
#    -f       create new file by adding index to default file or to the given file
#    -m MSG   commit message (default is letter-sequence or file-name)
#
# EXAMPLES
#
#    git do -n 3
#    git do foo.txt
#    git do -f
#    git do -f -n 5 foo.txt
#

DO=1
FILE="$(git rev-parse --abbrev-ref HEAD | sed 's/\//-/g').txt"

while test $# -ne 0; do
  arg=$1
  shift
  case $arg in
    -h|--help)
      cat $0 | sed -n '/^#/p' | sed '/^##/d' | sed 1d \
        | perl -0pe "s/^# (.*)\n# -+/# $(tput bold)\1$(tput sgr0)/m" \
        | perl -pe "s/(USAGE|OPTIONS|EXAMPLES)/$(tput setaf 0)\1$(tput sgr0)/" \
        | sed 's/#/ /g'
      exit 1;;
    -f)
      DO_NEW_FILE=1
      ;;
    -n)
      DO=$1
      shift
      ;;
    -m)
      CUSTOM_MSG=$1
      shift
      ;;
    *)
      FILE=$arg
      ;;
  esac
done

for (( i=1; i<=$DO; i++ )); do
  if [ $DO_NEW_FILE ]; then
    while [ -f $FILE ]; do
      FILE=`echo $FILE | perl -pe 's/(\d+)/$1+1/eg' | perl -pe 's/^([a-z-]+)\.(\w+)/$1-1.$2/g'`
    done
  fi

  LAST_MSG=$(git log --oneline --all --pretty='%s' --topo-order -1)

  if [ ! $CUSTOM_MSG ]; then
    if [[ $LAST_MSG =~ ^[A-Z]$ ]]; then
      MSG=$(printf "%d" "'$LAST_MSG" | echo $(($(< /dev/stdin)+1)) | awk '{printf("%c",$1)}')
    else
      MSG=$FILE
    fi
  else
    MSG=$CUSTOM_MSG
  fi
  echo $MSG >> $FILE

  git add .
  git ci -m "$MSG"
done

