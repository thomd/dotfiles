#!/usr/bin/env ruby
require 'rubygems'
require 'trollop'

class String
  def no_ws
    self.gsub(/\s/,'')
  end
  def is_not_bin?
    (self.no_ws =~ /^[0-1]+$/) == nil
  end

  def is_not_oct?
    (self.no_ws =~ /^[0-7]+$/) == nil
  end

  def is_not_dec?
    (self.no_ws =~ /^[0-9]+$/) == nil
  end

  def is_not_hex?
    (self.no_ws =~ /^([0-9]|[a-f])+$/i) == nil
  end
end

class Integer
  def to_h
    digit = "0123456789ABCDEF".split(//)
    hex = ''
    n = self
    while(n != 0)
       hex = String(digit[n % 16]) + hex
       n = n / 16
    end
    hex
  end
end

opts = Trollop::options do
  opt :bin, "Binary Value", :type => String
  opt :oct, "Octal Value", :type => String
  opt :dec, "Decimal Value", :type => String
  opt :hex, "Hex Value", :type => String
end

if opts[:bin_given] then
  Trollop::die :bin, "must be a binary value" if opts[:bin].is_not_bin?
  bin = opts[:bin].split /\s/
  puts "bin: #{bin.map{|x| x}.join ' '}"
  puts "oct: #{bin.map{|x| x.to_i(2).to_s(8)}.join ' '}"
  puts "dec: #{bin.map{|x| x.to_i(2)}.join ' '}"
  puts "hex: #{bin.map{|x| x.to_i(2).to_h}.join ' '}"
end

if opts[:oct_given] then
  Trollop::die :oct, "must be a octal value" if opts[:oct].is_not_oct?
  oct = opts[:oct].split /\s/
  puts "bin: #{oct.map{|x| x.to_i(8).to_s(2)}.join ' '}"
  puts "oct: #{oct.map{|x| x}.join ' '}"
  puts "dec: #{oct.map{|x| x.to_i(8)}.join ' '}"
  puts "hex: #{oct.map{|x| x.to_i(8).to_h}.join ' '}"
end

if opts[:dec_given] then
  Trollop::die :dec, "must be a decimal value" if opts[:dec].is_not_dec?
  dec = opts[:dec].split /\s/
  puts "bin: #{dec.map{|x| x.to_i.to_s(2)}.join ' '}"
  puts "oct: #{dec.map{|x| x.to_i.to_s(8)}.join ' '}"
  puts "dec: #{dec.map{|x| x}.join ' '}"
  puts "hex: #{dec.map{|x| x.to_i.to_h}.join ' '}"
end

if opts[:hex_given] then
  Trollop::die :hex, "must be a hexadecimal value" if opts[:hex].is_not_hex?
  hex = opts[:hex].split /\s/
  puts "bin: #{hex.map{|x| x.to_i(16).to_s(2).to_i}.join ' '}"
  puts "oct: #{hex.map{|x| x.to_i(16).to_s(8).to_i}.join ' '}"
  puts "dec: #{hex.map{|x| x.to_i(16)}.join ' '}"
  puts "hex: #{hex.map{|x| x.upcase}.join ' '}"
end


