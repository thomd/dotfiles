#!/usr/bin/env bash
set -e
[ -n "$DEBUG" ] && set -x

#
# Create a training repository
# ----------------------------
#
# For educational purposes
#
# USAGE
#
#    git training [REPO]
#
# REPOSITORIES
#
#    flow            repo with master-, develop-, feature- and release branches

usage() {
  cat $0 | sed -n '/^#/p' | sed '/^##/d' | sed 1d \
    | perl -0pe "s/^# (.*)\n# -+/# $(tput bold)\1$(tput sgr0)/m" \
    | perl -pe "s/(USAGE|REPOSITORIES)/$(tput setaf 0)\1$(tput sgr0)/" \
    | sed 's/#/ /g'
}

while test $# -ne 0; do
  arg=$1
  shift
  case $arg in
    -h|--help)
      usage
      exit 1
      ;;
    *)
      REPO=$arg
      ;;
  esac
done

create-flow-repo() {
  [ ! -d ".git" ] && git-setup

  # create a develop branch
  git checkout -b develop
  git-do -n 2

  # current develop branch is release/v1
  git checkout -b release/v1
  echo "v1" > version.txt
  git add version.txt
  git commit -m "bumped to version v1"
  git checkout master
  git merge release/v1
  git checkout develop
  git merge release/v1

  # create a feature/foo branch and do 2 commits
  git checkout -b feature/foo develop
  git-do -f -n 2

  # create a feature/bar branch and do 3 commits
  git checkout -b feature/bar develop
  git-do -f -n 3

  # create a feature/baz branch and do 1 commit
  git checkout -b feature/baz develop
  git-do -f

  # do 2 commits in feature/foo branch
  git checkout feature/foo
  git-do -f -n 2

  # do 1 commit in feature/baz branch
  git checkout feature/baz
  git-do -f

  # feature/foo was reviewed. Merge into develop branch
  git checkout develop
  git merge --no-edit --no-ff feature/foo
  git branch -d feature/foo

  # do 2 commits in feature/baz branch
  git checkout feature/baz
  git-do -f -n 2

  # do 1 commit in feature/bar branch
  git checkout feature/bar
  git-do -f

  # feature/baz was reviewed. Merge into develop branch
  git checkout develop
  git merge --no-edit --no-ff feature/baz
  git branch -d feature/baz

  # do 1 commit in feature/bar branch
  git checkout feature/bar
  git-do -f -n 2

  # feature/bar was reviewed. Merge into develop branch
  git checkout develop
  git merge --no-edit --no-ff feature/bar
  git branch -d feature/bar

  # create a release branch
  git checkout -b release/v2 master
  echo "v2" > version.txt
  git add version.txt
  git commit -m "bumped to version v2"

  git log --graph --pretty=format:'%C(red)%h%C(reset) — %C(white)%s%C(reset)%C(green)%d%C(reset) — %C(bold blue)%an%C(reset) %C(yellow)(%ar)%C(reset)' --all
}


create-branch-repo() {
#
#    branch          repo with two branches
#
#                               D---E     [HEAD -> develop]
#                              /
#                         A---B---C---F   [master]
#
  [ ! -d ".git" ] && git-setup -m A
  git-do
  git branch develop
  git-do
  git checkout develop
  git-do -n 2
  git checkout master
  git-do
  git checkout develop
  git log --graph --pretty=format:'%C(red)%h%C(reset) — %C(white)%s%C(reset)%C(green)%d%C(reset) — %C(bold blue)%an%C(reset) %C(yellow)(%ar)%C(reset)' --all
}


create-merge-repo() {
#
#    merge           repo with a merge-commit
#
#                         A---B---C---D---E-------J---K    [HEAD -> master]
#                                  \             /
#                                   F---G---H---I
#
  [ ! -d ".git" ] && git-setup -m A
  git-do -n 2
  git branch develop
  git-do -n 2
  git checkout develop
  git-do -n 4
  git checkout master
  git merge --no-ff develop -m "J"
  git-do
  git log --graph --pretty=format:'%C(red)%h%C(reset) — %C(white)%s%C(reset)%C(green)%d%C(reset) — %C(bold blue)%an%C(reset) %C(yellow)(%ar)%C(reset)' --all
}


case $REPO in
  flow)
    create-flow-repo
    exit 0
    ;;
  branch)
    create-branch-repo
    exit 0
    ;;
  merge)
    create-merge-repo
    exit 0
    ;;
  *)
    usage
    exit 1
    ;;
esac

