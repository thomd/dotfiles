#!/usr/bin/env bash
set -e
[ -n "$DEBUG" ] && set -x

#
# download files from Impex folder.
# XML files will be formatted automatically.
#
# USAGE
#
#    sfcc impex [options] [path] [filename-pattern]
#
# OPTIONS
#
#    -v          verbose
#    -n          dry-run (list files & folders only)
#    -c N        limit number of file to N
#
# EXAMPLES
#
#    sfcc impex log import-catalog-stg
#    sfcc impex archive/catalog StoreFront
#

# TODO:
# 1. make dry-run by default, download with -d,--download flag
# 2. make url.lst uniqe per process to allow parallel processes
# 3. make multiple curl downloads in parallel (to speed up overall download time)
# 4. add cleanup step when process finished


host=$SFCC_DL_HOST
basepath="/on/demandware.servlet/webdav/Sites/Impex/"
user=$SFCC_DL_USER
folder=""

while test $# -ne 0; do
  arg=$1
  shift
  case $arg in
    -h|--help)
      cat $0 | sed -n '/^#/p' | sed 1d | sed 's/#/ /g' \
        | perl -pe "s/Impex/$(tput setaf 2)${SFCC_DL_HOST}$(tput sgr0) Impex/" \
        | perl -pe "s/(USAGE|OPTIONS|EXAMPLES)/$(tput setaf 0)\1$(tput sgr0)/"
      exit 1
      ;;
    -v|--verbose)
      verbose=1
      ;;
    -n|--dry-run)
      dryrun=1
      ;;
    -c|--count)
      count=$1
      shift
      ;;
    *)
      if [ $# -eq 1 ]; then
        folder=$arg
        arg=$1
        shift
        filepattern=$arg
      else
        folder=$arg
      fi
      ;;
  esac
done

if [ $verbose ]; then
  echo -e "https://${host}${basepath}${folder}"
  curl -I -s -u "$user" "https://${host}${basepath}${folder}"
  exit 0
fi

curl -sN -u "$user" "https://${host}${basepath}${folder}" \
  | sed -n '/.*<a href="\(.*\)"><tt>.*/p' \
  | sed 's/.*<a href="\(.*\)"><tt>.*/\1/g' \
  | ( [[ $filepattern ]] && sed -n /$filepattern/p || cat ) \
  | ( [[ $count ]] && head -n $count || cat ) \
  > url.lst

if [ $dryrun ]; then
  less url.lst
  exit 0
fi

while read url; do
  echo $url | sed 's/.*\/\(.*\)/\1/g'
  curl -s -u "$user" -O "https://${host}${url}"
done < url.lst

# TODO: format directly after download and only if a flag -f,--format is set and only if it is a xml file
for file in `find . -name "*.xml"`; do
  xml fo $file > temp && mv temp $file ||Â echo $file >> fo-error.txt
done

cleanup() {
  rm url.lst
}
trap cleanup EXIT

exit 0
