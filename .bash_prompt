# vim:ft=sh:tw=160

# ascii colors
#
# RESET="\033[m"
# RED="\033[0;31m"
# LIGHT_RED="\033[1;31m"
# VERY_RED="\033[38;5;196m"
# GREY="\033[1;30m"
# LIGHT_GREEN="\033[1;32m"
# GREEN="\033[0;32m"
# BLUE="\033[0;36m"


#
# git info for prompt
#
function git_ps1 {
  local g="$(git rev-parse --git-dir 2>/dev/null)"
  if [ -n "$g" ]; then
    local r
    local b
    local i
    if [ -d "$g/../.dotest" ]
    then
      r="|AM/REBASE"
      b="$(git symbolic-ref HEAD 2>/dev/null)"
    elif [ -f "$g/.dotest-merge/interactive" ]
    then
      r="|REBASE-i"
      b="$(cat $g/.dotest-merge/head-name)"
    elif [ -d "$g/.dotest-merge" ]
    then
      r="|REBASE-m"
      b="$(cat $g/.dotest-merge/head-name)"
    elif [ -f "$g/MERGE_HEAD" ]
    then
      r="|MERGING"
      b="$(git symbolic-ref HEAD 2>/dev/null)"
    else
      if [ -f $g/BISECT_LOG ]
      then
        r="|BISECTING"
      fi
      if ! b="$(git symbolic-ref HEAD 2>/dev/null)"
      then
        b="$(cut -c1-7 $g/HEAD)..."
      fi
    fi

    if [ -n "$1" ]; then
      printf "$1" "${b##refs/heads/}$r"
    else
      printf "[%s]" "${b##refs/heads/}$r"
    fi
  fi
}

function git_dirty {
  [[ $(git status 2> /dev/null | tail -n1) != nothing\ to\ commit* ]] && echo "*"
}

function git_stash {
  [[ $(git stash list 2> /dev/null | tail -n1) != "" ]] && echo "^"
}

function git_ahead {
  local s="$(git status -sb 2> /dev/null | awk '/ahead/ {gsub(/^.*\[|\]/, "", $0); print $0}')"
  if [ -n "$s" ]; then
    echo -e " $s" | sed "s/ahead \([0-9][0-9]*\)/↑$1\1/g" | sed 's/, behind [0-9][0-9]*//g'
  fi
}

function git_behind {
  local s="$(git status -sb 2> /dev/null | awk '/behind/ {gsub(/^.*\[|\]/, "", $0); print $0}')"
  if [ -n "$s" ]; then
    echo -e " $s" | sed "s/behind \([0-9][0-9]*\)/↓$1\1/g" | sed 's/ahead [0-9][0-9]*, //g'
  fi
}


#
# svn info: show trunk- or branches-path in prompt for all repositories following the trunk/branches convention
#
function svn_ps1 {
  local svn="$(svn info 2>/dev/null)"
  if [ -n "$svn" ]; then
    local rev="$(svn info 2>/dev/null | sed -ne 's#^Revision: ##p')"
    local root="$(svn info 2>/dev/null | sed -ne 's#^Repository Root: ##p')"
    local url="$(svn info 2>/dev/null | sed -ne 's#^URL: '"$root/"'##p' | sed -ne 's/^.*\(trunk\).*$/\1/p;s/^.*\(branches\/[^\/.]*\).*$/\1/p')"
    local info="$url:$rev"
    [[ $url == '' ]] && info="svn:$rev"    # if not trunk/branches
    printf "$1" "$info"
  fi
}

function parse_svn_dirty {
    [[ $(svn status 2> /dev/null) != "" ]] && echo "*"
}


#
# prompt job info
#
function job_ps1 {
  [ $1 -gt 0 ] && echo -e "[$1] "
}


#
# prompt delimiter
#   If there is an absolute must, I do `sudo bash` which makes me root but with my environment
#
function delimiter_ps1 {
  if [[ $UID == 0 ]]; then
    echo -e "#"
  else
    echo -e ">"
  fi
}


export PS1='\n\[\e[1;30m\]$(job_ps1 \j)\
$([[ ( $SCRATCH_HOME && $PWD =~ ^$SCRATCH_HOME ) || ( $SCRATCH_TEMP && $PWD =~ ^$SCRATCH_TEMP ) ]] && echo -e "\[\e[0;31m\]" || echo -e "\[\e[0;36m\]")\W \
$(git_ps1 "\[\e[0;32m\][%s\[\e[0;31m\]$(git_dirty)\[\e[38;5;220m\]$(git_stash)\[\e[1;30m\]$(git_behind "\[\e[0;31m\]")\[\e[1;30m\]$(git_ahead "\[\e[0;32m\]")\[\e[0;32m\]]") \
\[\e[1;30m\]$(delimiter_ps1)\[\e[m\] '
export PS2=' \[\e[1;30m\]:\[\e[m\] '


